import unittest
from TestUtils import TestLexer

class LexerSuite(unittest.TestCase):
      
    def test_identifier(self):
        self.assertTrue(TestLexer.test("_asd15 15asd A45a4 _Afj6lf","_asd15,15,asd,A45a4,_Afj6lf,<EOF>",0))
        self.assertTrue(TestLexer.test("_itf(asd) rjei 15sjd iij789","_itf,(,asd,),rjei,15,sjd,iij789,<EOF>",1))
        self.assertTrue(TestLexer.test("eiAK45 tyu90s nd___ uj__sds","eiAK45,tyu90s,nd___,uj__sds,<EOF>",2))
        self.assertTrue(TestLexer.test("ky asdAA0sd itj ploi loi __lanh__","ky,asdAA0sd,itj,ploi,loi,__lanh__,<EOF>",3))
        self.assertTrue(TestLexer.test("JNH34jf 15__sd__ gnow leap","JNH34jf,15,__sd__,gnow,leap,<EOF>",4))
    def test_keyword(self):
        self.assertTrue(TestLexer.test("break BrEAK COntiNUe FoR FoR","break,BrEAK,COntiNUe,FoR,FoR,<EOF>",5))
        self.assertTrue(TestLexer.test("continue DownTO dOwnTO do Do dO","continue,DownTO,dOwnTO,do,Do,dO,<EOF>",6))
        self.assertTrue(TestLexer.test("iF If THen tHeN ElSe ELSE eLSe","iF,If,THen,tHeN,ElSe,ELSE,eLSe,<EOF>",7))
        self.assertTrue(TestLexer.test("ReTUrn reTURN WhiLE BEgin EnD FuncTION","ReTUrn,reTURN,WhiLE,BEgin,EnD,FuncTION,<EOF>",8))
        self.assertTrue(TestLexer.test("PREcedure VaR vAR TruE False","PREcedure,VaR,vAR,TruE,False,<EOF>",9))
        self.assertTrue(TestLexer.test("ArrAY Of OF ReaL BooLEAN INteger","ArrAY,Of,OF,ReaL,BooLEAN,INteger,<EOF>",10))
        self.assertTrue(TestLexer.test("STrIng NoT not AND anD oR Div","STrIng,NoT,not,AND,anD,oR,Div,<EOF>",11))
        self.assertTrue(TestLexer.test("dIv MOd mOD DIv","dIv,MOd,mOD,DIv,<EOF>",12))
    def test_op(self):
        self.assertTrue(TestLexer.test("++**--not or <>","+,+,*,*,-,-,not,or,<>,<EOF>",13))
        self.assertTrue(TestLexer.test("< <= dIv -- / / mod","<,<=,dIv,-,-,/,/,mod,<EOF>",14))
        self.assertTrue(TestLexer.test("MoD aNd AND = > >= >=","MoD,aNd,AND,=,>,>=,>=,<EOF>",15))
        self.assertTrue(TestLexer.test("aND MOD = >= <","aND,MOD,=,>=,<,<EOF>",16))
    def test_sep(self):
        self.assertTrue(TestLexer.test("[[[]]]:::","[,[,[,],],],:,:,:,<EOF>",17))
        self.assertTrue(TestLexer.test("()();;; .. .. .. ,","(,),(,),;,;,;,..,..,..,,,<EOF>",18))
        self.assertTrue(TestLexer.test(";;()",";,;,(,),<EOF>",19))
    def test_lit(self):
        self.assertTrue(TestLexer.test("12223554 129 01254 111","12223554,129,01254,111,<EOF>",20))
        self.assertTrue(TestLexer.test("14 12e4 1.e15 .15e85","14,12e4,1.e15,.15e85,<EOF>",21))
        self.assertTrue(TestLexer.test("1.2 1. .1 1e2 1.2E-2 1.2e-2","1.2,1.,.1,1e2,1.2E-2,1.2e-2,<EOF>",22))
        self.assertTrue(TestLexer.test(".1E2 9.0 12e8 0.33E-3 128e-42",".1E2,9.0,12e8,0.33E-3,128e-42,<EOF>",23))
        self.assertTrue(TestLexer.test("58e12 1.e195 3.5e77","58e12,1.e195,3.5e77,<EOF>",24))
        self.assertTrue(TestLexer.test("TrUE trUE FALse FaLse","TrUE,trUE,FALse,FaLse,<EOF>",25))
        self.assertTrue(TestLexer.test("ArrAY BoolEan InteGer Real String","ArrAY,BoolEan,InteGer,Real,String,<EOF>",26))
        self.assertTrue(TestLexer.test("-15487*15421 - 1e7 0.e15","-,15487,*,15421,-,1e7,0.e15,<EOF>",27))
        self.assertTrue(TestLexer.test("3.1 div 45.2 12e1","3.1,div,45.2,12e1,<EOF>",28))
        
    def test_all(self):
        self.assertTrue(TestLexer.test("array [1 .. 2] of InteGer","array,[,1,..,2,],of,InteGer,<EOF>",29))
        self.assertTrue(TestLexer.test("function f (): integer;","function,f,(,),:,integer,;,<EOF>",30))
        self.assertTrue(TestLexer.test("var i : integer;","var,i,:,integer,;,<EOF>",31))
        self.assertTrue(TestLexer.test("main := f := i := 100","main,:=,f,:=,i,:=,100,<EOF>",32))
        self.assertTrue(TestLexer.test("putIntLn(main );","putIntLn,(,main,),;,<EOF>",33))
        self.assertTrue(TestLexer.test("foo(3, a+1,m(2));","foo,(,3,,,a,+,1,,,m,(,2,),),;,<EOF>",34))
        self.assertTrue(TestLexer.test("d = c [ a ] + b;","d,=,c,[,a,],+,b,;,<EOF>",35))
        self.assertTrue(TestLexer.test("a := b[10] := foo ()[3]","a,:=,b,[,10,],:=,foo,(,),[,3,],<EOF>",36))
        self.assertTrue(TestLexer.test("continue;","continue,;,<EOF>",37))
        self.assertTrue(TestLexer.test("break;","break,;,<EOF>",38))
        self.assertTrue(TestLexer.test("return null;","return,null,;,<EOF>",39))
        self.assertTrue(TestLexer.test("if (a) then return a ;","if,(,a,),then,return,a,;,<EOF>",40))
        self.assertTrue(TestLexer.test("else return b;","else,return,b,;,<EOF>",41))
        self.assertTrue(TestLexer.test("procedure child_of_foo ( f: real )","procedure,child_of_foo,(,f,:,real,),<EOF>",42))
        self.assertTrue(TestLexer.test("var x ,y: real;","var,x,,,y,:,real,;,<EOF>",43))
        self.assertTrue(TestLexer.test("foo(2)[3+x] :=","foo,(,2,),[,3,+,x,],:=,<EOF>",44))
        self.assertTrue(TestLexer.test("a[b[2]] +3;","a,[,b,[,2,],],+,3,;,<EOF>",45))
        self.assertTrue(TestLexer.test("z : array [1 .. 2] of integer;","z,:,array,[,1,..,2,],of,integer,;,<EOF>",46))
        self.assertTrue(TestLexer.test("foo (a : array [ 1 .. 2 ] of real )","foo,(,a,:,array,[,1,..,2,],of,real,),<EOF>",47))
        self.assertTrue(TestLexer.test("goo (x: array [ 1 .. 2 ] of real );","goo,(,x,:,array,[,1,..,2,],of,real,),;,<EOF>",48))
        self.assertTrue(TestLexer.test("putIntLn(main );","putIntLn,(,main,),;,<EOF>",49))
        self.assertTrue(TestLexer.test("i : integer ;","i,:,integer,;,<EOF>",50))
        self.assertTrue(TestLexer.test("main : integer ;","main,:,integer,;,<EOF>",51))
        self.assertTrue(TestLexer.test("main := f := i := 100;","main,:=,f,:=,i,:=,100,;,<EOF>",52))
        self.assertTrue(TestLexer.test("var g : real ;","var,g,:,real,;,<EOF>",53))
        self.assertTrue(TestLexer.test("Message: string; ReturnCode: integer","Message,:,string,;,ReturnCode,:,integer,<EOF>",54))
        self.assertTrue(TestLexer.test("if ReturnCode <> OK","if,ReturnCode,<>,OK,<EOF>",55))
        self.assertTrue(TestLexer.test("Msg0(Output, 2);","Msg0,(,Output,,,2,),;,<EOF>",56))
        self.assertTrue(TestLexer.test("SendFlag := TRUE;","SendFlag,:=,TRUE,;,<EOF>",57))
        self.assertTrue(TestLexer.test("SendFlag := FALSE;","SendFlag,:=,FALSE,;,<EOF>",58))
        self.assertTrue(TestLexer.test("if not abc(GetIPAddr(Trim(Ltrim(Line))","if,not,abc,(,GetIPAddr,(,Trim,(,Ltrim,(,Line,),),<EOF>",59))
        self.assertTrue(TestLexer.test("OpenAttemptTimeout := WAITforever;","OpenAttemptTimeout,:=,WAITforever,;,<EOF>",60))
        self.assertTrue(TestLexer.test("BufferAddress := Addr(Buffer(1.));","BufferAddress,:=,Addr,(,Buffer,(,1.,),),;,<EOF>",61))
        self.assertTrue(TestLexer.test("return;","return,;,<EOF>",62))
        self.assertTrue(TestLexer.test("TermOut (Output);","TermOut,(,Output,),;,<EOF>",63))
        self.assertTrue(TestLexer.test("TermIn (Input);","TermIn,(,Input,),;,<EOF>",64))
        self.assertTrue(TestLexer.test("else begin a:= 100","else,begin,a,:=,100,<EOF>",65))
        self.assertTrue(TestLexer.test("a[b[2]] +3;","a,[,b,[,2,],],+,3,;,<EOF>",66))
        self.assertTrue(TestLexer.test("function f (): integer;","function,f,(,),:,integer,;,<EOF>",67))
        self.assertTrue(TestLexer.test("Sum := Num1 + Num2;","Sum,:=,Num1,+,Num2,;,<EOF>",68))
        self.assertTrue(TestLexer.test("BEgin END","BEgin,END,<EOF>",69))
        self.assertTrue(TestLexer.test("int main(","int,main,(,<EOF>",70))
        self.assertTrue(TestLexer.test("int main () putIntLn(4);","int,main,(,),putIntLn,(,4,),;,<EOF>",71))
        self.assertTrue(TestLexer.test("aAsVN","aAsVN,<EOF>",72))
        self.assertTrue(TestLexer.test("a := -7;","a,:=,-,7,;,<EOF>",73))
        self.assertTrue(TestLexer.test("a := -- 9;","a,:=,-,-,9,;,<EOF>",74))
        self.assertTrue(TestLexer.test("d := c[a] + b;","d,:=,c,[,a,],+,b,;,<EOF>",75))
        self.assertTrue(TestLexer.test("foo(-2)[-3+x] := a[b[2]] +3;","foo,(,-,2,),[,-,3,+,x,],:=,a,[,b,[,2,],],+,3,;,<EOF>",76))
        self.assertTrue(TestLexer.test("break;","break,;,<EOF>",77))
        self.assertTrue(TestLexer.test("return 1-33;","return,1,-,33,;,<EOF>",78))
        self.assertTrue(TestLexer.test("not not not not not aaa","not,not,not,not,not,aaa,<EOF>",79))
        self.assertTrue(TestLexer.test("b := - 15; { so this }","b,:=,-,15,;,<EOF>",80))
        self.assertTrue(TestLexer.test("a := - true; // aHihi","a,:=,-,true,;,<EOF>",81))
        self.assertTrue(TestLexer.test("if a then return 2.3;","if,a,then,return,2.3,;,<EOF>",82))
        self.assertTrue(TestLexer.test("else return 2;","else,return,2,;,<EOF>",83))
        self.assertTrue(TestLexer.test("call();","call,(,),;,<EOF>",84))
        self.assertTrue(TestLexer.test("d := c [ a ] + b ;","d,:=,c,[,a,],+,b,;,<EOF>",85))
        self.assertTrue(TestLexer.test("- - - - - - - - - - - 79 + jdi div asd;","-,-,-,-,-,-,-,-,-,-,-,79,+,jdi,div,asd,;,<EOF>",86))
        self.assertTrue(TestLexer.test("not not not - - - abc","not,not,not,-,-,-,abc,<EOF>",87))
    
    def test_string(self):
        self.assertTrue(TestLexer.test('"abc" "asdaisd__sd"', 'abc,asdaisd__sd,<EOF>',88))
        self.assertTrue(TestLexer.test('"abc\\n\\t\\n" "asdaisd__sd"', 'abc\\n\\t\\n,asdaisd__sd,<EOF>',89))
        self.assertTrue(TestLexer.test('"abc\\n\\t\\n\\b\\t" "asdaisd__sd9911"', 'abc\\n\\t\\n\\b\\t,asdaisd__sd9911,<EOF>',90))
        self.assertTrue(TestLexer.test('"\\"" "asdaisd__sd"', '\\",asdaisd__sd,<EOF>',91))
        self.assertTrue(TestLexer.test('"abc\\n\\b\\b" "asdaisd__sd"', 'abc\\n\\b\\b,asdaisd__sd,<EOF>',92))
        self.assertTrue(TestLexer.test('"abc" "151515asdasdaisd__sd"', 'abc,151515asdasdaisd__sd,<EOF>',93))
        self.assertTrue(TestLexer.test('"_______" "asdaisd__sd"', '_______,asdaisd__sd,<EOF>',94))
        self.assertTrue(TestLexer.test('"\\b\\t\\r" "asdaisd__sd"', '\\b\\t\\r,asdaisd__sd,<EOF>',95))

    def test_comment(self):
       self.assertTrue(TestLexer.test('asd __ 99.e15 // This is a line comment', 'asd,__,99.e15,<EOF>',96))
       self.assertTrue(TestLexer.test('sasfasf {asdasdasd}', 'sasfasf,<EOF>',97))
       self.assertTrue(TestLexer.test("""sasfasf {asda
       fjifidf
       fjisfsdasd
       \\n \\t \\b }""", 'sasfasf,<EOF>',98))
       self.assertTrue(TestLexer.test("""(* this
        is also a comment *)""", '<EOF>',99))
       self.assertTrue(TestLexer.test('"\\n"', '\\n,<EOF>',100))